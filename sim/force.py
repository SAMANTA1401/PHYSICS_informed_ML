# Engine Force propels the car forward.
# Rolling Friction slows it down (depends on car mass and surface friction).
# Air Drag increases with speed, making it harder to accelerate.
# Acceleration Reduces Over Time as drag and friction balance the engine force.


import pygame
import time
import math

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 400
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)

# Car properties
car_x = 50  # Start position
car_y = HEIGHT // 2
mass = 1200  # Car mass in kg
speed_kmh = 60  # Target speed in km/h
target_speed = (speed_kmh * 1000 / 3600)  # Convert km/h to m/s
acceleration = 2  # m/s^2 (car accelerating)
drag_coefficient = 0.3  # Cd value
frontal_area = 2.2  # m² (approx for small car)
air_density = 1.225  # kg/m³
rolling_friction = 0.015  # Coefficient for rolling resistance
gravity = 9.81  # m/s²
fps = 60  # Frames per second
dt = 1 / fps  # Time step

# Initialize physics
velocity = 0  # Start at rest
force_engine = mass * acceleration  # Force generated by engine
running = True
start_time = time.time()

# Set up display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Physics Simulation - Car Motion")
car = pygame.image.load("car.png")  # Load a car image
car = pygame.transform.scale(car, (100, 50))  # Resize

# Main simulation loop
while running:
    screen.fill(WHITE)
    
    # Calculate forces
    force_friction = rolling_friction * mass * gravity  # Rolling friction force
    force_drag = 0.5 * drag_coefficient * air_density * frontal_area * velocity ** 2  # Air drag force
    
    # Net force (Engine force - Drag - Friction)
    net_force = force_engine - (force_friction + force_drag)
    
    # Acceleration (Newton's Second Law)
    acceleration = net_force / mass
    
    # Update velocity (prevent exceeding max speed)
    velocity += acceleration * dt
    velocity = min(velocity, target_speed)
    
    # Convert velocity to pixels per frame
    velocity_px = velocity * (800 / (target_speed * 10))  # Scaling factor
    
    # Update car position
    car_x += velocity_px * dt
    
    # Stop if car reaches end of screen
    if car_x >= WIDTH - 100:
        running = False
    
    # Draw car
    screen.blit(car, (car_x, car_y))
    
    # Refresh display
    pygame.display.flip()
    pygame.time.delay(int(dt * 1000))  # Convert to milliseconds

# Quit Pygame
pygame.quit()
